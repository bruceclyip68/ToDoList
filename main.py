import streamlit as st

# Page configuration
st.set_page_config(
    page_title="AI Chat Assistant",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Custom CSS for styling
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 1rem 0;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .input-panel {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #e9ecef;
        margin-bottom: 1rem;
    }
    
    .response-panel {
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #e9ecef;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .stButton > button {
        width: 100%;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem;
        font-weight: 600;
        margin-top: 1rem;
    }
    
    .stButton > button:hover {
        background: linear-gradient(90deg, #5a6fd8 0%, #6a4190 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .settings-button {
        background: #6c757d !important;
        margin-top: 0.5rem;
    }
    
    .model-selector {
        margin: 1rem 0;
    }
    
    .response-area {
        min-height: 300px;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        font-family: 'Courier New', monospace;
        white-space: pre-wrap;
    }
    
    .history-area {
        min-height: 150px;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 1rem;
        font-size: 0.9rem;
    }
    
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }
    
    .action-buttons .stButton > button {
        width: auto;
        padding: 0.5rem 1rem;
        margin-top: 0;
    }
    
    .copy-button {
        background: #28a745 !important;
    }
    
    .clear-button {
        background: #dc3545 !important;
    }
</style>
""", unsafe_allow_html=True)

# Main header
st.markdown("""
<div class="main-header">
    <h1>ü§ñ AI Chat Assistant</h1>
    <p style="margin: 0; font-size: 1.2rem;">Powered by OpenRouter</p>
</div>
""", unsafe_allow_html=True)

# Create two columns
col1, col2 = st.columns([1, 1])

# Left Column - Input Panel
with col1:
    st.markdown('<div class="input-panel">', unsafe_allow_html=True)
    st.markdown("### üìù Input Configuration")
    
    # System Prompt
    st.markdown("**System Prompt:**")
    system_prompt = st.text_area(
        "Define the AI's behavior and role here...",
        height=120,
        placeholder="You are a helpful AI assistant that specializes in...",
        key="system_prompt"
    )
    
    # Context
    st.markdown("**Context:**")
    context = st.text_area(
        "Provide background information or context...",
        height=100,
        placeholder="Additional context or background information...",
        key="context"
    )
    
    # Question
    st.markdown("**Question:**")
    question = st.text_area(
        "Ask your question here...",
        height=100,
        placeholder="What would you like to know?",
        key="question"
    )
    
    # Model Selection
    st.markdown('<div class="model-selector">', unsafe_allow_html=True)
    st.markdown("**AI Model:**")
    model = st.selectbox(
        "Choose your preferred AI model",
        ["GPT-4", "Claude-3", "GPT-3.5", "Llama-2", "Mistral"],
        index=0,
        key="model_select"
    )
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Submit Button
    submit_button = st.button("üöÄ Submit Request", key="submit")
    
    # Settings Button
    settings_button = st.button("‚öôÔ∏è Settings", key="settings", help="Configure API settings")
    
    st.markdown('</div>', unsafe_allow_html=True)

# Right Column - Response Panel
with col2:
    st.markdown('<div class="response-panel">', unsafe_allow_html=True)
    st.markdown("### ü§ñ AI Response")
    
    # Response Display Area
    st.markdown('<div class="response-area">', unsafe_allow_html=True)
    if submit_button:
        st.markdown("**Streaming Response:**")
        st.markdown("This is where the AI response will appear in real-time...")
        st.markdown("The response will stream here as it's generated by the selected AI model.")
    else:
        st.markdown("**Response will appear here after submission...**")
        st.markdown("Click the Submit button to start generating a response.")
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Action Buttons
    st.markdown('<div class="action-buttons">', unsafe_allow_html=True)
    copy_button = st.button("üìã Copy Response", key="copy", help="Copy the full response to clipboard")
    clear_button = st.button("üóëÔ∏è Clear", key="clear", help="Clear the response and start over")
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Conversation History
    st.markdown("### üìö Conversation History")
    st.markdown('<div class="history-area">', unsafe_allow_html=True)
    st.markdown("**Previous conversations will appear here...**")
    st.markdown("‚Ä¢ Q: What is machine learning?")
    st.markdown("‚Ä¢ A: Machine learning is a subset of artificial intelligence...")
    st.markdown("‚Ä¢ Q: How does neural networks work?")
    st.markdown("‚Ä¢ A: Neural networks are computing systems inspired by...")
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

# Settings Panel (Collapsible)
if settings_button:
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è Settings Panel")
    
    settings_col1, settings_col2 = st.columns(2)
    
    with settings_col1:
        st.markdown("**API Configuration:**")
        api_key = st.text_input("OpenRouter API Key", type="password", help="Enter your OpenRouter API key")
        base_url = st.text_input("API Base URL", value="https://openrouter.ai/api/v1", help="OpenRouter API endpoint")
        
    with settings_col2:
        st.markdown("**App Settings:**")
        max_tokens = st.number_input("Max Tokens", min_value=100, max_value=4000, value=1000, help="Maximum response length")
        temperature = st.slider("Temperature", min_value=0.0, max_value=2.0, value=0.7, step=0.1, help="Response creativity (0=deterministic, 2=creative)")
        enable_logging = st.checkbox("Enable Langfuse Logging", value=True, help="Track conversations and performance")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #6c757d; padding: 1rem;">
    <p>Built with Streamlit ‚Ä¢ Powered by OpenRouter ‚Ä¢ Enhanced with Langfuse</p>
</div>
""", unsafe_allow_html=True)

# Display current configuration (for demo purposes)
if st.checkbox("Show Current Configuration", key="show_config"):
    st.markdown("### üìã Current Configuration")
    config_data = {
        "System Prompt": system_prompt[:100] + "..." if len(system_prompt) > 100 else system_prompt,
        "Context": context[:100] + "..." if len(context) > 100 else context,
        "Question": question[:100] + "..." if len(question) > 100 else question,
        "Selected Model": model,
        "API Key Set": "Yes" if 'api_key' in locals() and api_key else "No",
        "Max Tokens": max_tokens if 'max_tokens' in locals() else "Not set",
        "Temperature": temperature if 'temperature' in locals() else "Not set"
    }
    
    for key, value in config_data.items():
        st.text(f"{key}: {value}")
